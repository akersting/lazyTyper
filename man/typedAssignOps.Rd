% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/assign.R
\name{typedAssignOps}
\alias{typedAssignOps}
\alias{\%<-\%}
\alias{\%<-s\%}
\alias{.}
\title{Typed Assignment}
\usage{
x \%<-\% value

x \%<-s\% value

.(rhs)
}
\arguments{
\item{x}{an arbitrary (valid) left hand side of an assignment implying the
creation/modification of a \emph{typed} variable, i.e. typically the name
of a typed variable, an expression defining the part of a typed variable to
be replaced (e.g. \code{z[[1]]}), the call of a (subsetting) replacement
function taking a typed variable as the first argument (e.g.
\code{names(z)} or \code{names(z)[1:3]}). More uncommon LHSs like
\code{"z"}, \code{is.na(z[1:3])} or \code{f(g(h(z))[1:3])} are also
supported.}

\item{value}{a \emph{call} to \code{.()}.}

\item{rhs}{the value to be assigned to \code{x}, i.e. an arbitrary (valid)
right hand side of an assignment.}
}
\value{
Both operators invisibly return \code{rhs} evaluated, just as does
  base \code{\link{<-}}. Calling \code{.()} always throws an error.
}
\description{
Assignment operators which perform type checking when modifying a previously
\code{\link{declare}}d or \code{\link{cast}}ed variable. An error will be
thrown if the assignment violates the variable's type or if the variable is
untyped.
}
\details{
The right hand side of a typed assignment must be wrapped in
  \code{.()}. This is used to "overrule" the high precedence of custom
  operators like \code{\%<-\%} and \code{\%<-s\%} (see \link[base]{Syntax})
  in an explicit way (compared to using parentheses, which might easily be
  forgotten). If used as intended, the function \code{.()} is actually never
  really called and it is only included in this package to enable proper
  syntax highlighting and code diagnostics in editors/IDEs like RStudio.
  Hence, it is probably best to not think of \code{.()} as a separate
  function but rather as part of the syntax of typed assignments:

  \code{x \%<-\% .(rhs)}\cr \code{x \%<-s\% .(rhs)}

  Both operators are lazy in the sense that they first perform the assignment
  and only afterwards check if the just created/modified variable is (still)
  valid. Hence also the name of the package.

  The difference between the two operators is that \code{\%<-s\%} first
  creates a backup of the variable to be modified, which it then restores if
  the modification invalidated the variable. \code{\%<-\%}, on the other
  hand, does not create a backup, such that the variable might be left in an
  invalid state after the assignment. The advantage of \code{\%<-\%} over
  \code{\%<-s\%} however is that the former allows modification in place
  while the latter always has to create a copy of the variable, which for
  large objects can have a significant negative impact on performance.
}
\note{
As base \code{\link{<-}}, \code{\%<-\%} and \code{\%<-s\%} use
  positional matching of arguments.
}
\section{Options}{
 If the \emph{local} variable
  \code{.lazyTyper_warning2error} exists and \code{\link[base]{isTRUE}}, then
  the assignment will fail if the base assignment operator, which is used
  internally for the actual assignment, issues a warning, e.g. the famous
  "number of items to replace is not a multiple of replacement length".
  \emph{Local} here means in the environment of the assignment, or in an
  enclosing environment up to (and including) the first namespace or the
  global environment. If \emph{additionally} the local variable
  \code{.lazyTyper_hard_bounds} \code{\link[base]{isTRUE}} then the
  \code{\link[base]{option}} "check.bounds" is enabled for the time of this
  assignment and hence extending a vector (atomic or list) by something like
  \code{x <- 1:3; x[5] \%<-\% .(6)} will fail.
}

\section{RStudio Addin}{
 This package ships with addins for RStudio (>=
  v0.99.1111) for quickly inserting \code{\%<-\% .()} and \code{\%<-s\% .()}.
  Go to Tools > Addins > Browse Addins... > Keyboard Shortcuts... to assign
  keyboard shortcuts for this.
}

\examples{
declare(var, "numeric")
var \%<-\% .(c(1,2,3))

\dontrun{
var \%<-\% .("Hello World!")  # error: assignment of wrong type}
var

names(var)[2] \%<-\% .("two")
var

\dontrun{
class(var) \%<-\% .("character")  # error: would change type of var

a <- 1
a \%<-\% .(2)  # error: a is untyped
b \%<-\% .(9)  # same here}
}
\seealso{
\link{typed}, \code{\link{g}} for securely getting the value of a
  typed variable
}
