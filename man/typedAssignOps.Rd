% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/assign.R
\name{typedAssignOps}
\alias{\%<-\%}
\alias{\%<-s\%}
\alias{typedAssignOps}
\title{Typed Assignment}
\usage{
x \%<-\% value

x \%<-s\% value
}
\arguments{
\item{x}{the name of a typed variable, an expression defining the part of a
typed variable to be replaced (e.g. \code{z[[1]]}) or the call of a
(subsetting) replacement function taking a typed variable as the first
argument (e.g. \code{names(z)} or \code{names(z)[1:3]}).}

\item{value}{the value to be assigned to \code{x}.}
}
\description{
Assignment operators which perform type checking when modifying a previously
\code{\link{declare}}d or \code{\link{cast}}ed variable. An error will be
thrown if the assignment violates the variable's type or if the variable is
untyped.
}
\details{
Both operators are lazy in the sense that they first perform the
  assignment and only afterwards check if the just created/modified variable
  is (still) valid. Hence also the name of the package.

  The difference between the two operators is that \code{\%<-s\%} first
  creates a backup of the variable to be modified, which it then restores if
  the modification invalidated the variable. \code{\%<-\%}, on the other
  hand, does not create a backup, such that the variable might be left in an
  invalid state after the assignment. The advantage of \code{\%<-\%} over
  \code{\%<-s\%} however is that the former allows modification in place
  while the latter always has to create a copy of the variable, which for
  large objects can have a significant negative impact on performance.
}
\note{
As base \code{\link{<-}}, \code{\%<-\%} and \code{\%<-s\%} use
positional matching of arguments.

In contrast to base \code{\link{<-}}, chaining typed assignments is not
possible, i.e. \code{a \%<-\% b \%<-\% 1} does not work.
}
\section{RStudio Addin}{
 This package ships with addins for RStudio (>=
  v0.99.878) for quickly inserting \code{\%<-\%} and \code{\%<-s\%}. Go to
  Tools > Addins > Browse Addins... > Keyboard Shortcuts... to assign
  keyboard shortcuts for this.
}
\examples{
declare(var, "numeric")
var \%<-\% c(1,2,3)

\dontrun{
var \%<-\% "Hello World!"  # error: assignment of wrong type}
var

names(var)[2] \%<-\% "two"
var

\dontrun{
class(var) <- "character"  # error: would change type of var

a <- 1
a \%<-\% 2  # error: a is untyped
b \%<-\% 9  # same here}
}
\seealso{
\link{typed}, \code{\link{g}} for securely getting the value of a
  typed variable
}

