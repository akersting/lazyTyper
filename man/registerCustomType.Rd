% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/registerType.R
\name{registerCustomType}
\alias{registerCustomAlias}
\alias{registerCustomType}
\title{Register Custom Types}
\usage{
registerCustomType(type, checkPropertiesFun, checkTypeFun)

registerCustomAlias(alias, type, fixed = list(), defaults = list())
}
\arguments{
\item{type}{a character string with the name of the type to register (for
\code{registerCustomType}) or with the name of the type from which the alias
should inherit (for \code{registerCustomAlias}).}

\item{checkPropertiesFun}{a function to check the validity of the additional
properties passed to either declare or cast when creating a typed variable.
This function must accept these additional properties as (named) parameters
and it should throw an error if properties used are invalid. Afterwards, it
must return -- as a (named) list -- the set of properties which should
finally be stored. This set can be different from the original arguments to
this function, e.g. because one of two inconsistent properties was removed.
There is the helper function \code{\link{args2list}}, which returns the
\emph{current} values of the arguments of the calling function as a list.}

\item{checkTypeFun}{a function used for checking whether a variable is of type
\code{type}. This function must accept \code{x}, which is the variable to
test, as well as all the additional properties supported by this type as
(named) parameters.}

\item{alias}{a character string with the name of the alias to register.}

\item{fixed}{a (possibly empty) named (pair) list of properties of the type
\code{type} (distinct from \code{defaults}. Properties set here are fixed
for the alias and can no longer be set when using the type \code{alias}.}

\item{defaults}{a (possibly empty) named (pair) list of properties of the
type \code{type}. This changes the default values of the respective
properties.}
}
\description{
Register Custom Types
}
\examples{
# type "myScalar" is equivalent to the (base) type "numeric" with the
# property "length" fixed to 1 and the properties "min_length" and
# "max_length" fixed to the missing argument
registerCustomAlias("myScalar", type = "numeric",
                    defaults = alist(length = 1, min_length = ,
                    max_length = ))

# alternative way to fix properties to the missing argument
registerCustomAlias("myScalar", type = "numeric",
                    defaults = list(length = 1, min_length = quote(expr = ),
                    max_length = quote(expr = )))

\dontrun{
# error since min_length is fixed and hence connot be set
declare(a, "myScalar", min_length = 1)}

}
\seealso{
useful helper functions: \code{\link{args2list}},
 \code{\link{hasValue}}
}

